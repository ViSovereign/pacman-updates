import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export declare const protobufPackage = "proto.ext.clipboard";
export interface ClipboardHtmlContent {
    html: string;
    text: string;
}
export interface ClipboardPathContent {
    path: string;
}
export interface ClipboardOptions {
    concealed: boolean;
}
export interface CopyToClipboardRequest {
    content: ClipboardContent | undefined;
    options: ClipboardOptions | undefined;
}
export interface PasteToClipboardRequest {
    content: ClipboardContent | undefined;
}
export interface ClipboardContent {
    text?: string | undefined;
    html?: ClipboardHtmlContent | undefined;
    path?: ClipboardPathContent | undefined;
}
export interface CopyToClipboardResponse {
}
export interface PasteToClipboardResponse {
}
export interface Request {
    copy?: CopyToClipboardRequest | undefined;
    paste?: PasteToClipboardRequest | undefined;
}
export interface Response {
    copy?: CopyToClipboardResponse | undefined;
    paste?: PasteToClipboardResponse | undefined;
}
export declare const ClipboardHtmlContent: MessageFns<ClipboardHtmlContent>;
export declare const ClipboardPathContent: MessageFns<ClipboardPathContent>;
export declare const ClipboardOptions: MessageFns<ClipboardOptions>;
export declare const CopyToClipboardRequest: MessageFns<CopyToClipboardRequest>;
export declare const PasteToClipboardRequest: MessageFns<PasteToClipboardRequest>;
export declare const ClipboardContent: MessageFns<ClipboardContent>;
export declare const CopyToClipboardResponse: MessageFns<CopyToClipboardResponse>;
export declare const PasteToClipboardResponse: MessageFns<PasteToClipboardResponse>;
export declare const Request: MessageFns<Request>;
export declare const Response: MessageFns<Response>;
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
    fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
export {};
