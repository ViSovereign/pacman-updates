"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: clipboard.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = exports.Request = exports.PasteToClipboardResponse = exports.CopyToClipboardResponse = exports.ClipboardContent = exports.PasteToClipboardRequest = exports.CopyToClipboardRequest = exports.ClipboardOptions = exports.ClipboardPathContent = exports.ClipboardHtmlContent = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "proto.ext.clipboard";
function createBaseClipboardHtmlContent() {
    return { html: "", text: "" };
}
exports.ClipboardHtmlContent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.html !== "") {
            writer.uint32(10).string(message.html);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClipboardHtmlContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.html = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            html: isSet(object.html) ? globalThis.String(object.html) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.html !== "") {
            obj.html = message.html;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.ClipboardHtmlContent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClipboardHtmlContent();
        message.html = object.html ?? "";
        message.text = object.text ?? "";
        return message;
    },
};
function createBaseClipboardPathContent() {
    return { path: "" };
}
exports.ClipboardPathContent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClipboardPathContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return exports.ClipboardPathContent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClipboardPathContent();
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseClipboardOptions() {
    return { concealed: false };
}
exports.ClipboardOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.concealed !== false) {
            writer.uint32(8).bool(message.concealed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClipboardOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.concealed = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { concealed: isSet(object.concealed) ? globalThis.Boolean(object.concealed) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.concealed !== false) {
            obj.concealed = message.concealed;
        }
        return obj;
    },
    create(base) {
        return exports.ClipboardOptions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClipboardOptions();
        message.concealed = object.concealed ?? false;
        return message;
    },
};
function createBaseCopyToClipboardRequest() {
    return { content: undefined, options: undefined };
}
exports.CopyToClipboardRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.content !== undefined) {
            exports.ClipboardContent.encode(message.content, writer.uint32(10).fork()).join();
        }
        if (message.options !== undefined) {
            exports.ClipboardOptions.encode(message.options, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCopyToClipboardRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.content = exports.ClipboardContent.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.options = exports.ClipboardOptions.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            content: isSet(object.content) ? exports.ClipboardContent.fromJSON(object.content) : undefined,
            options: isSet(object.options) ? exports.ClipboardOptions.fromJSON(object.options) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.content !== undefined) {
            obj.content = exports.ClipboardContent.toJSON(message.content);
        }
        if (message.options !== undefined) {
            obj.options = exports.ClipboardOptions.toJSON(message.options);
        }
        return obj;
    },
    create(base) {
        return exports.CopyToClipboardRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCopyToClipboardRequest();
        message.content = (object.content !== undefined && object.content !== null)
            ? exports.ClipboardContent.fromPartial(object.content)
            : undefined;
        message.options = (object.options !== undefined && object.options !== null)
            ? exports.ClipboardOptions.fromPartial(object.options)
            : undefined;
        return message;
    },
};
function createBasePasteToClipboardRequest() {
    return { content: undefined };
}
exports.PasteToClipboardRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.content !== undefined) {
            exports.ClipboardContent.encode(message.content, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePasteToClipboardRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.content = exports.ClipboardContent.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { content: isSet(object.content) ? exports.ClipboardContent.fromJSON(object.content) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.content !== undefined) {
            obj.content = exports.ClipboardContent.toJSON(message.content);
        }
        return obj;
    },
    create(base) {
        return exports.PasteToClipboardRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePasteToClipboardRequest();
        message.content = (object.content !== undefined && object.content !== null)
            ? exports.ClipboardContent.fromPartial(object.content)
            : undefined;
        return message;
    },
};
function createBaseClipboardContent() {
    return { text: undefined, html: undefined, path: undefined };
}
exports.ClipboardContent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== undefined) {
            writer.uint32(10).string(message.text);
        }
        if (message.html !== undefined) {
            exports.ClipboardHtmlContent.encode(message.html, writer.uint32(18).fork()).join();
        }
        if (message.path !== undefined) {
            exports.ClipboardPathContent.encode(message.path, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClipboardContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.html = exports.ClipboardHtmlContent.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.path = exports.ClipboardPathContent.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? globalThis.String(object.text) : undefined,
            html: isSet(object.html) ? exports.ClipboardHtmlContent.fromJSON(object.html) : undefined,
            path: isSet(object.path) ? exports.ClipboardPathContent.fromJSON(object.path) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== undefined) {
            obj.text = message.text;
        }
        if (message.html !== undefined) {
            obj.html = exports.ClipboardHtmlContent.toJSON(message.html);
        }
        if (message.path !== undefined) {
            obj.path = exports.ClipboardPathContent.toJSON(message.path);
        }
        return obj;
    },
    create(base) {
        return exports.ClipboardContent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseClipboardContent();
        message.text = object.text ?? undefined;
        message.html = (object.html !== undefined && object.html !== null)
            ? exports.ClipboardHtmlContent.fromPartial(object.html)
            : undefined;
        message.path = (object.path !== undefined && object.path !== null)
            ? exports.ClipboardPathContent.fromPartial(object.path)
            : undefined;
        return message;
    },
};
function createBaseCopyToClipboardResponse() {
    return {};
}
exports.CopyToClipboardResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCopyToClipboardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.CopyToClipboardResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCopyToClipboardResponse();
        return message;
    },
};
function createBasePasteToClipboardResponse() {
    return {};
}
exports.PasteToClipboardResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePasteToClipboardResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PasteToClipboardResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePasteToClipboardResponse();
        return message;
    },
};
function createBaseRequest() {
    return { copy: undefined, paste: undefined };
}
exports.Request = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.copy !== undefined) {
            exports.CopyToClipboardRequest.encode(message.copy, writer.uint32(10).fork()).join();
        }
        if (message.paste !== undefined) {
            exports.PasteToClipboardRequest.encode(message.paste, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.copy = exports.CopyToClipboardRequest.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.paste = exports.PasteToClipboardRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            copy: isSet(object.copy) ? exports.CopyToClipboardRequest.fromJSON(object.copy) : undefined,
            paste: isSet(object.paste) ? exports.PasteToClipboardRequest.fromJSON(object.paste) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.copy !== undefined) {
            obj.copy = exports.CopyToClipboardRequest.toJSON(message.copy);
        }
        if (message.paste !== undefined) {
            obj.paste = exports.PasteToClipboardRequest.toJSON(message.paste);
        }
        return obj;
    },
    create(base) {
        return exports.Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRequest();
        message.copy = (object.copy !== undefined && object.copy !== null)
            ? exports.CopyToClipboardRequest.fromPartial(object.copy)
            : undefined;
        message.paste = (object.paste !== undefined && object.paste !== null)
            ? exports.PasteToClipboardRequest.fromPartial(object.paste)
            : undefined;
        return message;
    },
};
function createBaseResponse() {
    return { copy: undefined, paste: undefined };
}
exports.Response = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.copy !== undefined) {
            exports.CopyToClipboardResponse.encode(message.copy, writer.uint32(10).fork()).join();
        }
        if (message.paste !== undefined) {
            exports.PasteToClipboardResponse.encode(message.paste, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.copy = exports.CopyToClipboardResponse.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.paste = exports.PasteToClipboardResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            copy: isSet(object.copy) ? exports.CopyToClipboardResponse.fromJSON(object.copy) : undefined,
            paste: isSet(object.paste) ? exports.PasteToClipboardResponse.fromJSON(object.paste) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.copy !== undefined) {
            obj.copy = exports.CopyToClipboardResponse.toJSON(message.copy);
        }
        if (message.paste !== undefined) {
            obj.paste = exports.PasteToClipboardResponse.toJSON(message.paste);
        }
        return obj;
    },
    create(base) {
        return exports.Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.copy = (object.copy !== undefined && object.copy !== null)
            ? exports.CopyToClipboardResponse.fromPartial(object.copy)
            : undefined;
        message.paste = (object.paste !== undefined && object.paste !== null)
            ? exports.PasteToClipboardResponse.fromPartial(object.paste)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
